/* Goo Engine waterpack 
 * Copyright 2014 Goo Technologies AB
 */
(function(window){function f(){
define("goo/addons/waterpack/FlatWaterRenderer",["goo/renderer/MeshData","goo/renderer/Shader","goo/renderer/Camera","goo/math/Plane","goo/renderer/pass/RenderTarget","goo/math/Vector3","goo/math/Vector4","goo/renderer/Material","goo/renderer/TextureCreator","goo/renderer/shaders/ShaderFragment"],function(e,t,n,r,i,s,o,u,a,f){function l(e){e=e||{},this.useRefraction=e.useRefraction!==undefined?e.useRefraction:!0,this.waterCamera=new n(45,1,.1,2e3),this.renderList=[],this.waterPlane=new r;var t=Math.floor(window.innerWidth/(e.divider||2)),f=Math.floor(window.innerHeight/(e.divider||2));this.reflectionTarget=new i(t,f),this.useRefraction&&(this.refractionTarget=new i(t,f),this.depthTarget=new i(t,f));var l=new u(c,"WaterMaterial");l.shader.defines.REFRACTION=this.useRefraction,l.cullState.enabled=!1;var p=e.normalsUrl||"../resources/water/waternormals3.png";l.setTexture("NORMAL_MAP",(new a).loadTexture2D(p)),l.setTexture("REFLECTION_MAP",this.reflectionTarget),this.useRefraction&&(l.setTexture("REFRACTION_MAP",this.refractionTarget),l.setTexture("DEPTH_MAP",this.depthTarget)),this.waterMaterial=l,this.followCam=!0,this.updateWaterPlaneFromEntity=e.updateWaterPlaneFromEntity!==undefined?this.updateWaterPlaneFromEntity:!0,this.calcVect=new s,this.camReflectDir=new s,this.camReflectUp=new s,this.camReflectLeft=new s,this.camLocation=new s,this.camReflectPos=new s,this.offset=new s,this.clipPlane=new o,this.waterEntity=null,this.depthMaterial=new u(h,"depth")}l.prototype.process=function(e,t,n,r,i){t=t.filter(function(e){return e.meshRendererComponent.isReflectable});var s=this.waterPlane;this.waterCamera.copy(r),this.updateWaterPlaneFromEntity&&(s.constant=this.waterEntity.transformComponent.transform.translation.y);var o=r.translation.y>s.constant;this.waterEntity.skip=!0;if(o){this.useRefraction&&(n.process(this.waterCamera,t,this.renderList),this.clipPlane.setd(s.normal.x,-s.normal.y,s.normal.z,s.constant),this.waterCamera.setToObliqueMatrix(this.clipPlane),e.render(this.renderList,this.waterCamera,i,this.depthTarget,!0,this.depthMaterial),e.render(this.renderList,this.waterCamera,i,this.refractionTarget,!0));var u=this.calcVect,a=this.camReflectDir,f=this.camReflectUp,l=this.camReflectLeft,c=this.camLocation,h=this.camReflectPos;c.set(r.translation);var p=s.pseudoDistance(c);u.set(s.normal).mul(p*2),h.set(c.sub(u)),c.set(r.translation).add(r._direction),p=s.pseudoDistance(c),u.set(s.normal).mul(p*2),a.set(c.sub(u)).sub(h).normalize(),c.set(r.translation).add(r._up),p=s.pseudoDistance(c),u.set(s.normal).mul(p*2),f.set(c.sub(u)).sub(h).normalize(),l.set(f).cross(a).normalize(),this.waterCamera.translation.set(h),this.waterCamera._direction.set(a),this.waterCamera._up.set(f),this.waterCamera._left.set(l),this.waterCamera.normalize(),this.waterCamera.update();if(this.skybox&&this.followCam){var d=this.skybox.transformComponent.worldTransform;d.translation.setv(h),d.update()}}this.waterMaterial.shader.uniforms.abovewater=o,n.process(this.waterCamera,t,this.renderList),e.setRenderTarget(this.reflectionTarget),e.clear();if(this.skybox)if(this.skybox instanceof Array){this.clipPlane.setd(s.normal.x,s.normal.y,s.normal.z,s.constant),this.waterCamera.setToObliqueMatrix(this.clipPlane,10);for(var v=0;v<this.skybox.length;v++)e.render(this.skybox[v],this.waterCamera,i,this.reflectionTarget,!1),this.skybox[v].skip=!0}else e.render(this.skybox,this.waterCamera,i,this.reflectionTarget,!1),this.skybox.skip=!0;this.clipPlane.setd(s.normal.x,s.normal.y,s.normal.z,s.constant),this.waterCamera.setToObliqueMatrix(this.clipPlane),e.render(this.renderList,this.waterCamera,i,this.reflectionTarget,!1),this.waterEntity.skip=!1;if(this.skybox)if(this.skybox instanceof Array)for(var v=0;v<this.skybox.length;v++)this.skybox[v].skip=!1;else this.skybox.skip=!1;if(o&&this.skybox&&this.followCam){var m=r.translation,d=this.skybox.transformComponent.worldTransform;d.translation.setv(m).addv(this.offset),d.update(),this.waterCamera._updatePMatrix=!0}},l.prototype.setSkyBox=function(e){this.skybox=e,e.meshRendererComponent&&(this.skybox.meshRendererComponent.materials[0].depthState.enabled=!1,this.skybox.meshRendererComponent.materials[0].renderQueue=0,this.skybox.meshRendererComponent.cullMode="Never")},l.prototype.setWaterEntity=function(e){this.waterEntity=e,this.waterEntity.meshRendererComponent.materials[0]=this.waterMaterial};var c={defines:{REFRACTION:!1},attributes:{vertexPosition:e.POSITION,vertexNormal:e.NORMAL},uniforms:{viewMatrix:t.VIEW_MATRIX,projectionMatrix:t.PROJECTION_MATRIX,worldMatrix:t.WORLD_MATRIX,normalMatrix:t.NORMAL_MATRIX,cameraPosition:t.CAMERA,normalMap:"NORMAL_MAP",reflection:"REFLECTION_MAP",refraction:"REFRACTION_MAP",depthmap:"DEPTH_MAP",vertexTangent:[1,0,0,1],waterColor:[.0625,.0625,.0625],abovewater:!0,fogColor:[1,1,1],sunDirection:[.66,.66,.33],sunColor:[1,1,.5],sunShininess:100,sunSpecPower:4,fogStart:0,fogScale:2e3,timeMultiplier:1,time:t.TIME,distortionMultiplier:.025,fresnelPow:2,normalMultiplier:3,fresnelMultiplier:1,waterScale:5,doFog:!0,resolution:t.RESOLUTION},vshader:["attribute vec3 vertexPosition;","attribute vec3 vertexNormal;","uniform vec4 vertexTangent;","uniform mat4 viewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 worldMatrix;","uniform mat4 normalMatrix;","uniform vec3 cameraPosition;","uniform float waterScale;","varying vec2 texCoord0;","varying vec3 eyeVec;","varying vec4 viewCoords;","varying vec3 worldPos;","void main(void) {","	worldPos = (worldMatrix * vec4(vertexPosition, 1.0)).xyz;","	texCoord0 = worldPos.xz * waterScale;","	vec3 n = normalize((normalMatrix * vec4(vertexNormal.x, vertexNormal.y, -vertexNormal.z, 0.0)).xyz);","	vec3 t = normalize((normalMatrix * vec4(vertexTangent.xyz, 0.0)).xyz);","	vec3 b = cross(n, t) * vertexTangent.w;","	mat3 rotMat = mat3(t, b, n);","	vec3 eyeDir = worldPos - cameraPosition;","	eyeVec = eyeDir * rotMat;","	viewCoords = projectionMatrix * viewMatrix * worldMatrix * vec4(vertexPosition, 1.0);","	gl_Position = viewCoords;","}"].join("\n"),fshader:["uniform sampler2D normalMap;","uniform sampler2D reflection;","#ifdef REFRACTION","uniform sampler2D refraction;","uniform sampler2D depthmap;","#endif","uniform vec3 waterColor;","uniform bool abovewater;","uniform vec3 fogColor;","uniform float fogStart;","uniform float fogScale;","uniform float time;","uniform float timeMultiplier;","uniform float distortionMultiplier;","uniform float fresnelPow;","uniform vec3 sunDirection;","uniform vec3 sunColor;","uniform float sunShininess;","uniform float sunSpecPower;","uniform float normalMultiplier;","uniform float fresnelMultiplier;","uniform bool doFog;","uniform vec2 resolution;","varying vec2 texCoord0;","varying vec3 eyeVec;","varying vec4 viewCoords;","varying vec3 worldPos;","vec4 combineTurbulence(in vec2 coords) {","	float t = time * timeMultiplier;","	vec4 coarse1 = texture2D(normalMap, coords * vec2(0.0012, 0.001) + vec2(0.019 * t, 0.021 * t));","	vec4 coarse2 = texture2D(normalMap, coords * vec2(0.001, 0.0011) + vec2(-0.017 * t, 0.016 * t));","	vec4 detail1 = texture2D(normalMap, coords * vec2(0.008) + vec2(0.06 * t, 0.03 * t));","	vec4 detail2 = texture2D(normalMap, coords * vec2(0.006) + vec2(0.05 * t, -0.04 * t));","	return (detail1 * 0.25 + detail2 * 0.25 + coarse1 * 0.75 + coarse2 * 1.0) / 2.25 - 0.48;","}","#ifdef REFRACTION",f.methods.unpackDepth,"#endif","void main(void)","{","	float fogDist = clamp((viewCoords.z-fogStart)/fogScale,0.0,1.0);","	vec2 normCoords = texCoord0;","	vec4 noise = combineTurbulence(normCoords);","	vec3 normalVector = normalize(noise.xyz * vec3(normalMultiplier, normalMultiplier, 1.0));","	vec3 localView = normalize(eyeVec);","	float fresnel = dot(normalize(normalVector * vec3(fresnelMultiplier, fresnelMultiplier, 1.0)), localView);","	if ( abovewater == false ) {","		fresnel = -fresnel;","	}","	fresnel *= 1.0 - fogDist;","	float fresnelTerm = 1.0 - fresnel;","	fresnelTerm = pow(fresnelTerm, fresnelPow);","	fresnelTerm = clamp(fresnelTerm, 0.0, 1.0);","	fresnelTerm = fresnelTerm * 0.95 + 0.05;","	vec2 projCoord = viewCoords.xy / viewCoords.q;","	projCoord = (projCoord + 1.0) * 0.5;","	projCoord.y -= 1.0 / resolution.y;","#ifdef REFRACTION","	float depthUnpack = unpackDepth(texture2D(depthmap, projCoord));","	if (depthUnpack > 0.5) {depthUnpack = 0.0;}","	float depth2 = clamp(depthUnpack * 400.0, 0.0, 1.0);","	vec2 projCoordRefr = vec2(projCoord);","	projCoordRefr += (normalVector.xy * distortionMultiplier) * (depth2);","	projCoordRefr = clamp(projCoordRefr, 0.001, 0.999);","	depthUnpack = unpackDepth(texture2D(depthmap, projCoordRefr));","	float depth = clamp(depthUnpack * 40.0, 0.8, 1.0);","#endif","	projCoord += (normalVector.xy * distortionMultiplier);","	projCoord = clamp(projCoord, 0.001, 0.999);","	if ( abovewater == true ) {","		projCoord.x = 1.0 - projCoord.x;","	}","	vec4 waterColorX = vec4(waterColor, 1.0);","	vec4 reflectionColor = texture2D(reflection, projCoord);","	if ( abovewater == false ) {","		reflectionColor *= vec4(0.8,0.9,1.0,1.0);","		vec4 endColor = mix(reflectionColor,waterColorX,fresnelTerm);","		gl_FragColor = mix(endColor,waterColorX,fogDist);","	}","	else {","		vec3 sunSpecReflection = normalize(reflect(-sunDirection, normalVector));","		float sunSpecDirection = max(0.0, dot(localView, sunSpecReflection));","		vec3 specular = pow(sunSpecDirection, sunShininess) * sunSpecPower * sunColor;","		vec4 endColor = waterColorX;","#ifdef REFRACTION","		vec4 refractionColor = texture2D(refraction, projCoordRefr) * vec4(0.6);","		endColor = mix(refractionColor, waterColorX, depth);","#endif","		endColor = mix(endColor, reflectionColor, fresnelTerm);","		if (doFog) {","			gl_FragColor = (vec4(specular, 1.0) + mix(endColor,reflectionColor,fogDist)) * (1.0-fogDist) + vec4(fogColor, 1.0) * fogDist;","		} else {","			gl_FragColor = vec4(specular, 1.0) + mix(endColor,reflectionColor,fogDist);","		}","	}","}"].join("\n")},h={attributes:{vertexPosition:e.POSITION},uniforms:{viewProjectionMatrix:t.VIEW_PROJECTION_MATRIX,worldMatrix:t.WORLD_MATRIX,farPlane:t.FAR_PLANE},vshader:["attribute vec3 vertexPosition;","uniform mat4 viewProjectionMatrix;","uniform mat4 worldMatrix;","varying vec4 vPosition;","void main(void) {","	vPosition = worldMatrix * vec4(vertexPosition, 1.0);","	gl_Position = viewProjectionMatrix * vPosition;","}"].join("\n"),fshader:["uniform float farPlane;",f.methods.packDepth,"varying vec4 vPosition;","void main(void)","{","	float linearDepth = abs(vPosition.y) / farPlane;","	gl_FragColor = packDepth(linearDepth);","}"].join("\n")};return l}),define("goo/addons/waterpack/ProjectedGridWaterRenderer",["goo/renderer/MeshData","goo/renderer/Shader","goo/renderer/Camera","goo/math/Plane","goo/renderer/pass/RenderTarget","goo/renderer/pass/FullscreenPass","goo/math/Vector3","goo/renderer/Material","goo/renderer/TextureCreator","goo/renderer/shaders/ShaderLib","goo/renderer/shaders/ShaderFragment"],function(e,t,n,r,i,s,o,u,a,f,l){function c(t){this.waterCamera=new n(45,1,.1,2e3),this.renderList=[],this.waterPlane=new r,t=t||{};var l=window.innerWidth/(t.divider||4),c=window.innerHeight/(t.divider||4);this.renderTarget=new i(l,c),l=window.innerWidth/(t.divider||1),c=window.innerHeight/(t.divider||1),this.heightTarget=new i(l,c,{type:"Float"}),this.normalTarget=new i(l,c,{}),this.fullscreenPass=new s(f.normalmap),this.fullscreenPass.material.shader.uniforms.resolution=[l,c];var d=this.waterMaterial=new u(h,"WaterMaterial");d.cullState.enabled=!1,d.setTexture("NORMAL_MAP",(new a).loadTexture2D("../resources/water/waternormals3.png")),d.setTexture("REFLECTION_MAP",this.renderTarget),d.setTexture("BUMP_MAP",this.heightTarget),d.setTexture("NORMAL_MAP_COARSE",this.normalTarget);var v=this.materialWire=new u(f.simple,"mat");v.wireframe=!0,v.wireframeColor=[0,0,0],this.calcVect=new o,this.camReflectDir=new o,this.camReflectUp=new o,this.camReflectLeft=new o,this.camLocation=new o,this.camReflectPos=new o,this.waterEntity=null;var m=this.projData=new e(e.defaultMap([e.POSITION]),4,6);m.getAttributeBuffer(e.POSITION).set([0,0,0,1,0,0,1,1,0,0,1,0]),m.getIndexBuffer().set([1,3,0,2,3,1]);var g=new u(p,"mat");this.projRenderable={meshData:m,materials:[g]}}c.prototype.updateHelper=function(t,n,r,i){var s=this.projData.getAttributeBuffer(e.POSITION);s[0]=t.x/t.w,s[1]=0,s[2]=t.z/t.w,s[3]=n.x/n.w,s[4]=0,s[5]=n.z/n.w,s[6]=r.x/r.w,s[7]=0,s[8]=r.z/r.w,s[9]=i.x/i.w,s[10]=0,s[11]=i.z/i.w,this.projData.setVertexDataUpdated()},c.prototype.process=function(e,t,n,r,i){var s=this.waterEntity.meshDataComponent.meshData;s.update(r),this.waterMaterial.shader.uniforms.intersectBottomLeft=[s.intersectBottomLeft.x,s.intersectBottomLeft.y,s.intersectBottomLeft.z,s.intersectBottomLeft.w],this.waterMaterial.shader.uniforms.intersectBottomRight=[s.intersectBottomRight.x,s.intersectBottomRight.y,s.intersectBottomRight.z,s.intersectBottomRight.w],this.waterMaterial.shader.uniforms.intersectTopLeft=[s.intersectTopLeft.x,s.intersectTopLeft.y,s.intersectTopLeft.z,s.intersectTopLeft.w],this.waterMaterial.shader.uniforms.intersectTopRight=[s.intersectTopRight.x,s.intersectTopRight.y,s.intersectTopRight.z,s.intersectTopRight.w],this.updateHelper(s.intersectBottomLeft,s.intersectBottomRight,s.intersectTopRight,s.intersectTopLeft),e.render(this.projRenderable,r,i,this.heightTarget,!0),this.fullscreenPass.render(e,this.normalTarget,this.heightTarget,0);var o=this.waterPlane;this.waterCamera.copy(r),o.constant=this.waterEntity.transformComponent.transform.translation.y;var u=r.translation.y>o.constant;if(u){var a=this.calcVect,f=this.camReflectDir,l=this.camReflectUp,c=this.camReflectLeft,h=this.camLocation,p=this.camReflectPos;h.set(r.translation);var d=o.pseudoDistance(h);a.set(o.normal).mul(d*2),p.set(h.sub(a)),h.set(r.translation).add(r._direction),d=o.pseudoDistance(h),a.set(o.normal).mul(d*2),f.set(h.sub(a)).sub(p).normalize(),h.set(r.translation).add(r._up),d=o.pseudoDistance(h),a.set(o.normal).mul(d*2),l.set(h.sub(a)).sub(p).normalize(),c.set(l).cross(f).normalize(),this.waterCamera.translation.set(p),this.waterCamera._direction.set(f),this.waterCamera._up.set(l),this.waterCamera._left.set(c),this.waterCamera.normalize(),this.waterCamera.update();if(this.skybox){var v=this.skybox.transformComponent.worldTransform;v.translation.setv(p),v.update()}}this.waterMaterial.shader.uniforms.abovewater=u,this.waterEntity.skip=!0,this.renderList.length=0,n.process(this.waterCamera,t,this.renderList),e.render(this.renderList,this.waterCamera,i,this.renderTarget,!0),this.waterEntity.skip=!1;if(u&&this.skybox){var m=r.translation,v=this.skybox.transformComponent.worldTransform;v.translation.setv(m),v.update()}},c.prototype.setSkyBox=function(e){this.skybox=e},c.prototype.setWaterEntity=function(e){this.waterEntity=e,this.waterEntity.meshRendererComponent.cullMode="Never",this.waterEntity.meshRendererComponent.materials[0]=this.waterMaterial;var t=this.waterEntity.meshDataComponent.meshData;this.waterMaterial.shader.uniforms.density=[t.densityX,t.densityY]};var h={attributes:{vertexUV0:e.TEXCOORD0},uniforms:{viewMatrix:t.VIEW_MATRIX,projectionMatrix:t.PROJECTION_MATRIX,worldMatrix:t.WORLD_MATRIX,normalMatrix:t.NORMAL_MATRIX,cameraPosition:t.CAMERA,normalMap:"NORMAL_MAP",reflection:"REFLECTION_MAP",bump:"BUMP_MAP",normalMapCoarse:"NORMAL_MAP_COARSE",vertexNormal:[0,-1,0],vertexTangent:[1,0,0,1],waterColor:[15,15,15],abovewater:!0,fogColor:[1,1,1,1],sunDirection:[.66,-0.1,.66],coarseStrength:.25,detailStrength:2,fogStart:0,camNear:t.NEAR_PLANE,camFar:t.FAR_PLANE,time:t.TIME,intersectBottomLeft:[0,0,0,0],intersectTopLeft:[0,0,0,0],intersectTopRight:[0,0,0,0],intersectBottomRight:[0,0,0,0],grid:!1,heightMultiplier:50,density:[1,1]},vshader:["attribute vec2 vertexUV0;","uniform vec3 vertexNormal;","uniform vec4 vertexTangent;","uniform mat4 viewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 worldMatrix;","uniform mat4 normalMatrix;","uniform vec3 cameraPosition;","uniform float time;","uniform vec3 sunDirection;","uniform float coarseStrength;","uniform float heightMultiplier;","uniform sampler2D bump;","uniform vec4 intersectBottomLeft;","uniform vec4 intersectTopLeft;","uniform vec4 intersectTopRight;","uniform vec4 intersectBottomRight;","varying vec2 texCoord0;","varying vec2 texCoord1;","varying vec3 eyeVec;","varying vec3 sunDir;","varying vec4 viewCoords;","varying vec3 worldPos;","varying vec3 normal;","void main(void) {","	vec4 pointTop = mix(intersectTopLeft, intersectTopRight, vertexUV0.x);","	vec4 pointBottom = mix(intersectBottomLeft, intersectBottomRight, vertexUV0.x);","	vec4 pointFinal = mix(pointTop, pointBottom, 1.0 - vertexUV0.y);","	pointFinal.xz /= pointFinal.w;","	pointFinal.y = 0.0;","	vec4 screenpos = projectionMatrix * viewMatrix * worldMatrix * vec4(pointFinal.xyz, 1.0);","	vec2 projCoord = screenpos.xy / screenpos.q;","	projCoord = (projCoord + 1.0) * 0.5;","	float height = texture2D(bump, projCoord).x;","	pointFinal.y = height * heightMultiplier;","	texCoord1 = vertexUV0;","	vec4 pos = worldMatrix * vec4(pointFinal.xyz, 1.0);","	worldPos = pos.xyz;","	texCoord0 = worldPos.xz * 2.0;","	vec3 n = normalize((normalMatrix * vec4(vertexNormal, 0.0)).xyz);","	vec3 t = normalize((normalMatrix * vec4(vertexTangent.xyz, 0.0)).xyz);","	vec3 b = cross(n, t) * vertexTangent.w;","	mat3 rotMat = mat3(t, b, n);","	vec3 eyeDir = worldPos - cameraPosition;","	eyeVec = eyeDir * rotMat;","	sunDir = sunDirection * rotMat;","	viewCoords = projectionMatrix * viewMatrix * pos;","	gl_Position = viewCoords;","}"].join("\n"),fshader:["uniform sampler2D normalMap;","uniform sampler2D reflection;","uniform sampler2D normalMapCoarse;","uniform vec3 waterColor;","uniform bool abovewater;","uniform vec4 fogColor;","uniform float time;","uniform bool grid;","uniform vec2 density;","uniform float camNear;","uniform float camFar;","uniform float fogStart;","uniform float coarseStrength;","uniform float detailStrength;","varying vec2 texCoord0;","varying vec2 texCoord1;","varying vec3 eyeVec;","varying vec3 sunDir;","varying vec4 viewCoords;","varying vec3 worldPos;","varying vec3 normal;","const vec3 sunColor = vec3(1.0, 0.96, 0.96);","vec4 getNoise(vec2 uv) {","    vec2 uv0 = (uv/123.0)+vec2(time/17.0, time/29.0);","    vec2 uv1 = uv/127.0-vec2(time/-19.0, time/31.0);","    vec2 uv2 = uv/vec2(897.0, 983.0)+vec2(time/51.0, time/47.0);","    vec2 uv3 = uv/vec2(991.0, 877.0)-vec2(time/59.0, time/-63.0);","    vec4 noise = (texture2D(normalMap, uv0)) +","                 (texture2D(normalMap, uv1)) +","                 (texture2D(normalMap, uv2)*3.0) +","                 (texture2D(normalMap, uv3)*3.0);","    return noise/4.0-1.0;","}","void main(void)","{","	vec2 projCoord = viewCoords.xy / viewCoords.q;","	projCoord = (projCoord + 1.0) * 0.5;","	float fs = camFar * fogStart;","	float fogDist = clamp(max(viewCoords.z - fs, 0.0)/(camFar - camNear - fs), 0.0, 1.0);","	vec3 coarseNormal = texture2D(normalMapCoarse, projCoord).xyz * 2.0 - 1.0;","	vec2 normCoords = texCoord0;","	vec4 noise = getNoise(normCoords);","	vec3 normalVector = normalize(noise.xyz * vec3(1.8 * detailStrength, 1.8 * detailStrength, 1.0) + coarseNormal.xyz * vec3(1.8 * coarseStrength, 1.8 * coarseStrength, 1.0));","	vec3 localView = normalize(eyeVec);","	float fresnel = dot(normalize(normalVector*vec3(1.0, 1.0, 1.0)), localView);","	if ( abovewater == false ) {","		fresnel = -fresnel;","	}","	float fresnelTerm = 1.0 - fresnel;","	fresnelTerm *= fresnelTerm;","	fresnelTerm *= fresnelTerm;","	fresnelTerm = fresnelTerm * 0.95 + 0.05;","	if ( abovewater == true ) {","		projCoord.x = 1.0 - projCoord.x;","	}","	projCoord += (normalVector.xy * 0.05);","	projCoord = clamp(projCoord, 0.001, 0.999);"," vec4 waterColorX = vec4(waterColor / 255.0, 1.0);","	vec4 reflectionColor = texture2D(reflection, projCoord);","	if ( abovewater == false ) {","		reflectionColor *= vec4(0.8,0.9,1.0,1.0);","		vec4 endColor = mix(reflectionColor,waterColorX,fresnelTerm);","		gl_FragColor = mix(endColor,waterColorX,fogDist);","	}","	else {","		vec3 diffuse = vec3(0.0);","		vec3 specular = vec3(0.0);","		vec3 sunreflection = normalize(reflect(-sunDir, normalVector));","		float direction = max(0.0, dot(localView, sunreflection));","		specular += pow(direction, 100.0)*sunColor * 2.0;","		diffuse += max(dot(sunDir, normalVector),0.0)*sunColor*0.4;","		vec4 endColor = mix(waterColorX,reflectionColor,fresnelTerm);","		gl_FragColor = mix(vec4(diffuse*0.0 + specular, 1.0) + mix(endColor,reflectionColor,fogDist), fogColor, fogDist);","	}","	if (grid) {","		vec2 low = abs(fract(texCoord1*density)-0.5);","		float dist = 1.0 - step(min(low.x, low.y), 0.05);","		gl_FragColor *= vec4(dist);","	}","}"].join("\n")},p={attributes:{vertexPosition:e.POSITION},uniforms:{viewMatrix:t.VIEW_MATRIX,projectionMatrix:t.PROJECTION_MATRIX,worldMatrix:t.WORLD_MATRIX,time:t.TIME},vshader:["attribute vec3 vertexPosition;","uniform mat4 viewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 worldMatrix;","varying vec4 worldPos;","varying vec4 viewCoords;","void main(void) {","	worldPos = worldMatrix * vec4(vertexPosition, 1.0);","	viewCoords = viewMatrix * worldPos;","	gl_Position = projectionMatrix * viewMatrix * worldPos;","}"].join("\n"),fshader:["precision mediump float;","uniform float time;","varying vec4 worldPos;","varying vec4 viewCoords;",l.noise3d,"vec4 getNoise(sampler2D map, vec2 uv) {","    vec2 uv0 = (uv/223.0)+vec2(time/17.0, time/29.0);","    vec2 uv1 = uv/327.0-vec2(time/-19.0, time/31.0);","    vec2 uv2 = uv/vec2(697.0, 983.0)+vec2(time/151.0, time/147.0);","    vec2 uv3 = uv/vec2(791.0, 877.0)-vec2(time/259.0, time/263.0);","    vec4 noise = (texture2D(map, uv0)*0.0) +","                 (texture2D(map, uv1)*0.0) +","                 (texture2D(map, uv2)*0.0) +","                 (texture2D(map, uv3)*10.0);","    return noise/5.0-1.0;","}","void main(void)","{","	float fogDist = clamp(-viewCoords.z / 1000.0, 0.0, 1.0);","	gl_FragColor = vec4((snoise(vec3(worldPos.xz * 0.008, time * 0.4))+snoise(vec3(worldPos.xz * 0.02, time * 0.8))*0.5)/10.0);","}"].join("\n")};return c}),define("goo/addons/waterpack/WaterRegister",["goo/scripts/Scripts","goo/addons/waterpack/FlatWaterRenderer","goo/addons/waterpack/ProjectedGridWaterRenderer"],function(e){var t=["goo/scripts/Scripts","goo/addons/waterpack/FlatWaterRenderer","goo/addons/waterpack/ProjectedGridWaterRenderer"];for(var n=1;n<t.length;n++){var r=t[n].slice(t[n].lastIndexOf("/")+1);e.addClass(r,arguments[n])}}),require(["goo/addons/waterpack/FlatWaterRenderer","goo/addons/waterpack/ProjectedGridWaterRenderer","goo/addons/waterpack/WaterRegister"],function(e,t,n){var r=window.goo;if(!r)return;r.FlatWaterRenderer=e,r.ProjectedGridWaterRenderer=t,r.WaterRegister=n}),define("goo/addons/waterpack/waterpack",function(){});
}try{
if(window.localStorage&&window.localStorage.gooPath){
window.require.config({
paths:{goo:localStorage.gooPath}
});
}else f()
}catch(e){f()}
})(window,undefined)